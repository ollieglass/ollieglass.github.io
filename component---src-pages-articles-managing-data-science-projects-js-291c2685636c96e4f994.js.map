{"version":3,"sources":["webpack:///./src/pages/articles/managing-data-science-projects.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","_components_layout__WEBPACK_IMPORTED_MODULE_2__","a","createElement","property","content","name","m","module","exports","default","d","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_wait_for_route_change__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_4___default","_parse_path__WEBPACK_IMPORTED_MODULE_5__","createContext","props","Consumer","staticQueryData","data","query","render","children","Error","propTypes","object","string","isRequired","func","ProdPageRenderer","_ref","location","pageResources","_loader__WEBPACK_IMPORTED_MODULE_4__","getResourcesForPathnameSync","pathname","react__WEBPACK_IMPORTED_MODULE_1___default","_page_renderer__WEBPACK_IMPORTED_MODULE_3__","Object","assign","key","json","prop_types__WEBPACK_IMPORTED_MODULE_2___default","shape","react_helmet__WEBPACK_IMPORTED_MODULE_2__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","ListLink","style","display","marginRight","to","Layout","margin","maxWidth","padding","title","type","marginBottom","textDecoration","listStyle","paddingLeft","marginLeft","marginTop","node"],"mappings":"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","file":"component---src-pages-articles-managing-data-science-projects-js-291c2685636c96e4f994.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../../components/layout'\n\n\nexport default () => (\n  <Layout>\n\n    <Helmet>\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content=\"http://ollieglass.com/articles/managing-data-science-projects\" />\n      <meta property=\"og:title\" content=\"Managing data science projects\" />\n      <meta property=\"og:description\" content=\"Here's a framework I use to manage data science projects. I divide them into four stages: discovery, research, production and ongoing operation. I’ll give examples of the outcomes and timelines of each stage on a small three-month project.\" />\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content=\"@ollieglass\" />\n    </Helmet>\n\n\n\t<h2>Managing data science projects</h2>\n\n\t<p>Data science and machine learning projects have high expectations and high failure rates. Ideas seem promising and data scientists start experimenting, but teams struggle to follow through. Projects run on indefinitely without clear goals or deliverables, teams lose direction and momentum, important individual contributors leave. What makes these projects so difficult? How can they be delivered effectively?</p>\n\n\t<p>In this piece I’ll show how I deliver a project. Projects typically take between three to twelve months, I recommend clients start small, so I'll give examples for a three-month project. I’ll describe the tasks and outcomes at each stage, how I manage common risks and challenges, and how I work with stakeholders.</p>\n\n\t<h3>Discovery</h3>\n\n\t<p>While amazing things can be done with data science, many descriptions of it are hyperbolic and don’t help you think clearly about what's possible. Involving a data scientist from the start will let you check the feasibility of ideas and get a sense of the costs, time and chance of success. A data scientist can also suggest different ideas to develop your business, or ways to approach a project that you might not have considered.</p>\n\n\t<p>Data science is inherently risky. Even if a similar company has shipped a similar feature, that’s no guarantee it’ll work for you or work as well. That said, some features are a natural fit for data science. Say your product lets users send emails campaigns. You have records of email send times and open rates, and users manually enter the time to send emails. You can improve their campaign outcomes with basic data-driven decision support. This would be a smart, low risk feature to try.</p>\n\n\t<p>Data science usually involves creating models that make predictions. Models might predict the best time to send a marketing email, or which related products to show to a user. It’s important to work out how accurate a model needs to be for a product feature to be viable, this lets you set a clear goal for the research stage. If you can build some flexibility into a feature you may be able to find ways to make it work even with less than ideal accuracy.</p>\n\n\t<p><strong>Outcomes:</strong> A shortlist of possible features, and a single feature to focus on. A sense of what the finished feature would look like if it was working well.</p>\n\n\t<p><strong>Risks:</strong> Discovering it’s not possible to build your feature, or that it would be prohibitively expensive.</p>\n\n\t<p><strong>Time:</strong> From a few days to a few weeks, usually a week.</p>\n\n\t<h3>Research</h3>\n\n\t<p>Research is required to work out how to create the model and meet the accuracy goal. This involves considering what the feature does, for example, predicting sale prices from photos of shoes, and finding ways to express that as a scientific or machine learning problem. Scientific problems can be tackled in different ways, you might start by shortlisting methods and considering the tradeoffs between them.</p>\n\n\t<p>Naturally, these methods all require data. How much data you need depends on the methods being used, with requirements ranging from tens or low hundreds to hundreds of millions of records. Having more data available will usually improve results, so if you don’t already have much data collected it can be worth finding new ways to capture it. Approaches include adding “data exhausts” to existing processes in your product, buying third party data sets, adding different but related proxy data to your own, or creating new synthetic data.</p>\n\n\t<p>Sometimes it can help to add more detail to data, especially if it wasn’t captured with data science or machine learning in mind. Running a data enrichment process with your team is good for building small data sets or for enrichment that requires expert knowledge. Third party services like Amazon’s Mechanical Turk or Clickworker can be used for larger volumes.</p>\n\n\t<p>When the data is ready and the approach is clear it’s best to start by trying a simple modelling technique and measuring the results. Starting simply lets you set a baseline to compare future research against, and means your first research communication will have less complicated ground to cover.</p>\n\n\t<p>Research and results must be communicated to prevent data science work from becoming opaque and detached from the wider business, and this can be challenging. Modelling techniques may be complex and hard to describe. Results may not be intuitive, instead of a single accuracy measure there may be several factors which have to be traded off against each other. These may require stakeholders to work with new concepts so they can understand and input on the decisions being made.</p>\n\n\t<p>Like any project, it’s can help to communicate it in different ways to different audiences. General company-wide presentations and discussions can build buy in and engagement in the project, and don’t need to go into all of the details. Sharing specifics with key stakeholders is invaluable for surfacing business insights and requirements that can guide the direction of the research.</p>\n\n\t<p>The scientific method involves rounds of trial and error, revision and improvement. Progress can be uneven, alternating between plateaus of testing new approaches with no apparent change followed by rapid improvements when a new method bears fruit. Over time there should be a gradual increase in accuracy and performance as the approach is being refined, but it’s important to know that there’s no guarantee that research will be able to deliver the results required in a reasonable timeframe or cost. These risks should have been raised and considered in the discovery stage.</p>\n\n\t<p>Ideally you'll know the minimum accuracy level you require research to achieve. When that's reached you can choose between researching further to improve accuracy or moving to production.</p>\n\n\t<p>It’s usually best to take on projects where you’re reasonably confident that minimum accuracy can be achieved. If you're trying something riskier and more experimental, the risks and costs must be clearly understood.</p>\n\n\t<p><strong>Outcomes:</strong> A data science methodology that produces the outputs you need at an acceptable accuracy level. You and your team understand the general approach and have agreed any trade-offs.</p>\n\n\t<p><strong>Risks:</strong> Not achieving a minimum accuracy goal within the research time or budget. Discovering an approach that can’t be scaled to a production system.</p>\n\n\t<p><strong>Time:</strong> From a few weeks to a few months, usually a month.</p>\n\n\t<h3>Production</h3>\n\n\t<p>We’re ready to move the data preparation and modelling techniques into production. This is the most straightforward part of the process. Software engineering is not trivial, but the work of building and shipping features is not unique to data science. Most of the challenges you meet here have well known solutions, including working with large amounts of data, meeting low latency requirements, or managing complex data transformations.</p>\n\n\t<p>That said, there’s no single common approach for moving data science from research into production, nor is there a widely adopted production framework. Ruby on Rails transformed web development and became something close to an industry standard, React and Redux are doing something similar for front-end development. But data science only has some proprietary third-party services, nothing standard or open source.</p>\n\n\t<p>Most projects require similar technical components: some kind of extract, transform and load (ETL) data pipeline that moves data from your product to a data science service and prepares it for use, model building and validation, deployment of models to a live system and ongoing monitoring. To prevent them from becoming tangled or overly complicated, they should be carefully designed and integrated with your product and deployment environment.</p>\n\n\t<p>There are excellent libraries like Keras, Tensorflow, Pandas, scikit-learn and NumPy for the most common and critical tasks, used and sponsored by companies like Bloomberg, Spotify and Booking.com. Dedicated “big data” tools like Hadoop and Spark are not needed on most projects. Instead, AWS and Google Cloud provide excellent services for working with data at scale and are straightforward to integrate with most existing technology stacks. Your engineering team can ensure services are chosen that work well with your other systems.</p>\n\n\t<p><strong>Outcomes</strong>: A data product feature deployed to production.</p>\n\n\t<p><strong>Risks:</strong> Usual engineering risks of time and budget overruns. Producing complex software that’s difficult to maintain.</p>\n\n\t<p><strong>Time:</strong> About a month.</p>\n\n\t<h3>Operation</h3>\n\n\t<p>It’s important to monitor that features are operating properly in production. Uptime and general status of a data science feature can usually be overseen with the monitoring services used in other parts of a technology stack. To ensure a fast and straightforward technical handover, involve the engineers in the design and build of the system, and DevOps or SRE teams in the design and operation of monitoring.</p>\n\n\t<p>To be certain that a system is working well in a live setting, it might necessary to monitor model accuracy on live data. If performance goes outside of an expected range, you may want alerts and a fallback system to kick in.</p>\n\n\t<p>Some machine learning systems will require updating when the underlying data changes. A process for monitoring and updating models can be incorporated into the design, build and ongoing operation of the system. It may be possible to automatically retrain models with only minimal oversight or intervention, and this task can be handed over to a general developer or analyst. A dedicated data scientist may be necessary to monitor and adjust more complex or bespoke models.</p>\n\n\t<p>It’s vital that the new feature is understood and adopted by its stakeholders including product users and internal teams. Bringing data science into a company is a transformational process, and new ways of working and thinking have to take root for it to be successful. The shared understanding and ownership built by involving the wider team in the research efforts will pay dividends here.</p>\n\n\t<p><strong>Outcomes:</strong> Ownership is transferred to in house technical team. Adoption of the new feature and any new ways of working it requires.</p>\n\n\t<p><strong>Risks:</strong> Failing to maintain the feature or make full use of it. Organizational rejection of the new feature.</p>\n\n\t<p><strong>Time:</strong> At least a week dedicated handover time, but also ongoing throughout the project, especially in the earlier stages.</p>\n\n\t<h3>Summing up</h3>\n\n\t<p>Projects can seem daunting at first, but dividing work into stages with clear goals and processes will make it easier to manage. Discovery and research stages are all about finding good ideas to try and learning what it’s possible to achieve. If data science isn’t going to work for you, find out as fast as possible, before committing to building and managing new technology.</p>\n\n\t<p>If research shows you have a viable feature, then the key tasks become making decisions with the team about the best trade-offs and getting it to an optimal level of performance. Ongoing data science work may be required to support it, but much of the delivery and ongoing operational work is similar to any other engineering project.</p>\n\n  </Layout>\n);\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport { waitForRouteChange } from \"./wait-for-route-change\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  waitForRouteChange,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    key: location.pathname,\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Link } from \"gatsby\"\n\nimport './simplegrid.css'\nimport './layout.css'\n\nconst ListLink = props =>\n  <li style={{ display: `inline-block`, marginRight: `0.5rem` }}>\n    <Link to={props.to}>\n      {props.children}\n    </Link>\n  </li>\n\nconst Layout = ({ children }) => (\n  <div style={{ margin: `0 auto`, maxWidth: 850, padding: `1.25rem 1rem` }}>\n\n    <Helmet\n      title=\"Ollie Glass - data science, machine learning &amp; data strategy\"\n    >\n      {/* General tags */}\n      <meta name=\"description\" content=\"Ollie Glass, data science, machine learning, data strategy\" />\n      {/*<meta name=\"image\" content={image} />*/}\n\n      <meta name=\"google-site-verification\" content=\"rvZZQM9_PSENuyEeo4gS4Iu972qssTQnifk73ePR06o\" />\n      <script type=\"text/javascript\">{`\n          window.smartlook||(function(d) {\n          var o=smartlook=function(){ o.api.push(arguments)},h=d.getElementsByTagName('head')[0];\n          var c=d.createElement('script');o.api=new Array();c.async=true;c.type='text/javascript';\n          c.charset='utf-8';c.src='https://rec.smartlook.com/recorder.js';h.appendChild(c);\n          })(document);\n          smartlook('init', '22317595d614e19e1a73959d93c5ea3db08fdc0b');\n      `}</script>\n\n    </Helmet>\n\n    <header style={{ marginBottom: '1rem' }}>\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\n        <h1 style={{ display: 'inline' }}>Ollie Glass</h1>\n      </Link>\n\n      <ul style={{\n        listStyle: 'none',\n        paddingLeft: 0,\n        marginLeft: 0,\n        marginBottom: 0,\n        marginTop: 10\n      }}>\n        <ListLink to=\"/\">Home</ListLink>\n        <ListLink to=\"/services/\">Services</ListLink>\n        <ListLink to=\"/case-studies/\">Case studies</ListLink>\n        <ListLink to=\"/articles/\">Articles</ListLink>\n      </ul>\n    </header>\n\n    {children}\n\n  </div>\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}